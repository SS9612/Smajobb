name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  backend-security:
    name: Backend Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore Smajobb/Smajobb.csproj

    - name: Run security audit
      run: |
        dotnet list Smajobb/Smajobb.csproj package --vulnerable --include-transitive

    - name: Run SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  frontend-security:
    name: Frontend Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run npm audit
      working-directory: ./frontend
      run: npm audit --audit-level=moderate

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Build Docker images
      run: |
        docker build -f Dockerfile.production -t smajobb-api:test .
        docker build -f frontend/Dockerfile.production -t smajobb-frontend:test ./frontend

    - name: Run Trivy image scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'smajobb-api:test'
        format: 'sarif'
        output: 'trivy-image-api.sarif'

    - name: Run Trivy image scan for frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'smajobb-frontend:test'
        format: 'sarif'
        output: 'trivy-image-frontend.sarif'

    - name: Upload Trivy image scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-image-api.sarif,trivy-image-frontend.sarif'

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Check .NET package licenses
      run: |
        dotnet list Smajobb/Smajobb.csproj package --include-transitive | grep -E "(MIT|Apache|BSD)" || echo "No problematic licenses found"

    - name: Check npm package licenses
      working-directory: ./frontend
      run: |
        npm install -g license-checker
        license-checker --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense"

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, backend-security, frontend-security, container-security, secrets-scan, license-scan]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Generate security report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Generated: $(date)" >> security-report.md
        echo "" >> security-report.md
        echo "## Scan Results" >> security-report.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
        echo "- Backend Security: ${{ needs.backend-security.result }}" >> security-report.md
        echo "- Frontend Security: ${{ needs.frontend-security.result }}" >> security-report.md
        echo "- Container Security: ${{ needs.container-security.result }}" >> security-report.md
        echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-report.md
        echo "- License Scan: ${{ needs.license-scan.result }}" >> security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md

    - name: Security Results
      if: ${{ needs.dependency-scan.result == 'failure' || needs.backend-security.result == 'failure' || needs.frontend-security.result == 'failure' || needs.container-security.result == 'failure' || needs.secrets-scan.result == 'failure' }}
      run: |
        echo "ðŸš¨ Security issues detected in the codebase"
        echo "Dependency Scan: ${{ needs.dependency-scan.result }}"
        echo "Backend Security: ${{ needs.backend-security.result }}"
        echo "Frontend Security: ${{ needs.frontend-security.result }}"
        echo "Container Security: ${{ needs.container-security.result }}"
        echo "Secrets Scan: ${{ needs.secrets-scan.result }}"
