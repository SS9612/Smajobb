name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          # Generate changelog from previous tag
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          # First release
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Changes in this release
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Docker Images
          
          - Backend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ steps.version.outputs.version }}`
          - Frontend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.version.outputs.version }}`
          
          ## Installation
          
          ```bash
          # Pull the latest images
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ steps.version.outputs.version }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.version.outputs.version }}
          
          # Update your docker-compose.yml to use the new tags
          ```
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}

  build-release-images:
    name: Build Release Images
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.production
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [create-release, build-release-images]


    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          cd /opt/smajobb
          export IMAGE_TAG=${{ needs.create-release.outputs.version }}
          export REGISTRY=${{ env.REGISTRY }}
          export IMAGE_NAME=${{ env.IMAGE_NAME }}
          ./scripts/deploy.sh deploy

    - name: Run staging tests
      run: |
        sleep 30
        curl -f ${{ secrets.STAGING_URL }}/health || exit 1
        curl -f ${{ secrets.STAGING_URL }}/api/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-release-images, deploy-staging]


    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create production backup
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          cd /opt/smajobb
          ./scripts/backup-database.sh backup

    - name: Deploy to Production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          cd /opt/smajobb
          export IMAGE_TAG=${{ needs.create-release.outputs.version }}
          export REGISTRY=${{ env.REGISTRY }}
          export IMAGE_NAME=${{ env.IMAGE_NAME }}
          ./scripts/deploy.sh deploy

    - name: Run production health checks
      run: |
        sleep 60
        curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
        curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1

    - name: Release Results
      run: |
        echo "ðŸŽ‰ Release ${{ needs.create-release.outputs.version }} deployed to production!"

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release, deploy-production]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update version in documentation
      run: |
        # Update version in README.md
        sed -i "s/Version: .*/Version: ${{ needs.create-release.outputs.version }}/" README.md
        
        # Update version in package.json
        sed -i "s/\"version\": \".*\"/\"version\": \"${{ needs.create-release.outputs.version }}\"/" frontend/package.json

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md frontend/package.json
        git commit -m "Update version to ${{ needs.create-release.outputs.version }}" || exit 0
        git push
